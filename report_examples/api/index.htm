<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8"/>
    <title>Test Report</title>
    <link href="assets/style.css" rel="stylesheet" type="text/css"/></head>
  <body onLoad="init()">
    <script>/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */


function toArray(iter) {
    if (iter === null) {
        return null;
    }
    return Array.prototype.slice.call(iter);
}

function find(selector, elem) {
    if (!elem) {
        elem = document;
    }
    return elem.querySelector(selector);
}

function find_all(selector, elem) {
    if (!elem) {
        elem = document;
    }
    return toArray(elem.querySelectorAll(selector));
}

function sort_column(elem) {
    toggle_sort_states(elem);
    var colIndex = toArray(elem.parentNode.childNodes).indexOf(elem);
    var key;
    if (elem.classList.contains('numeric')) {
        key = key_num;
    } else if (elem.classList.contains('result')) {
        key = key_result;
    } else {
        key = key_alpha;
    }
    sort_table(elem, key(colIndex));
}

function show_all_extras() {
    find_all('.col-result').forEach(show_extras);
}

function hide_all_extras() {
    find_all('.col-result').forEach(hide_extras);
}

function show_extras(colresult_elem) {
    var extras = colresult_elem.parentNode.nextElementSibling;
    var expandcollapse = colresult_elem.firstElementChild;
    extras.classList.remove("collapsed");
    expandcollapse.classList.remove("expander");
    expandcollapse.classList.add("collapser");
}

function hide_extras(colresult_elem) {
    var extras = colresult_elem.parentNode.nextElementSibling;
    var expandcollapse = colresult_elem.firstElementChild;
    extras.classList.add("collapsed");
    expandcollapse.classList.remove("collapser");
    expandcollapse.classList.add("expander");
}

function show_filters() {
    var filter_items = document.getElementsByClassName('filter');
    for (var i = 0; i < filter_items.length; i++)
        filter_items[i].hidden = false;
}

function add_collapse() {
    // Add links for show/hide all
    var resulttable = find('table#results-table');
    var showhideall = document.createElement("p");
    showhideall.innerHTML = '<a href="javascript:show_all_extras()">Show all details</a> / ' +
                            '<a href="javascript:hide_all_extras()">Hide all details</a>';
    resulttable.parentElement.insertBefore(showhideall, resulttable);

    // Add show/hide link to each result
    find_all('.col-result').forEach(function(elem) {
        var collapsed = get_query_parameter('collapsed') || 'Passed';
        var extras = elem.parentNode.nextElementSibling;
        var expandcollapse = document.createElement("span");
        if (collapsed.includes(elem.innerHTML)) {
            extras.classList.add("collapsed");
            expandcollapse.classList.add("expander");
        } else {
            expandcollapse.classList.add("collapser");
        }
        elem.appendChild(expandcollapse);

        elem.addEventListener("click", function(event) {
            if (event.currentTarget.parentNode.nextElementSibling.classList.contains("collapsed")) {
                show_extras(event.currentTarget);
            } else {
                hide_extras(event.currentTarget);
            }
        });
    })
}

function get_query_parameter(name) {
    var match = RegExp('[?&]' + name + '=([^&]*)').exec(window.location.search);
    return match && decodeURIComponent(match[1].replace(/\+/g, ' '));
}

function init () {
    reset_sort_headers();

    add_collapse();

    show_filters();

    toggle_sort_states(find('.initial-sort'));

    find_all('.sortable').forEach(function(elem) {
        elem.addEventListener("click",
                              function(event) {
                                  sort_column(elem);
                              }, false)
    });

};

function sort_table(clicked, key_func) {
    var rows = find_all('.results-table-row');
    var reversed = !clicked.classList.contains('asc');
    var sorted_rows = sort(rows, key_func, reversed);
    /* Whole table is removed here because browsers acts much slower
     * when appending existing elements.
     */
    var thead = document.getElementById("results-table-head");
    document.getElementById('results-table').remove();
    var parent = document.createElement("table");
    parent.id = "results-table";
    parent.appendChild(thead);
    sorted_rows.forEach(function(elem) {
        parent.appendChild(elem);
    });
    document.getElementsByTagName("BODY")[0].appendChild(parent);
}

function sort(items, key_func, reversed) {
    var sort_array = items.map(function(item, i) {
        return [key_func(item), i];
    });
    var multiplier = reversed ? -1 : 1;

    sort_array.sort(function(a, b) {
        var key_a = a[0];
        var key_b = b[0];
        return multiplier * (key_a >= key_b ? 1 : -1);
    });

    return sort_array.map(function(item) {
        var index = item[1];
        return items[index];
    });
}

function key_alpha(col_index) {
    return function(elem) {
        return elem.childNodes[1].childNodes[col_index].firstChild.data.toLowerCase();
    };
}

function key_num(col_index) {
    return function(elem) {
        return parseFloat(elem.childNodes[1].childNodes[col_index].firstChild.data);
    };
}

function key_result(col_index) {
    return function(elem) {
        var strings = ['Error', 'Failed', 'Rerun', 'XFailed', 'XPassed',
                       'Skipped', 'Passed'];
        return strings.indexOf(elem.childNodes[1].childNodes[col_index].firstChild.data);
    };
}

function reset_sort_headers() {
    find_all('.sort-icon').forEach(function(elem) {
        elem.parentNode.removeChild(elem);
    });
    find_all('.sortable').forEach(function(elem) {
        var icon = document.createElement("div");
        icon.className = "sort-icon";
        icon.textContent = "vvv";
        elem.insertBefore(icon, elem.firstChild);
        elem.classList.remove("desc", "active");
        elem.classList.add("asc", "inactive");
    });
}

function toggle_sort_states(elem) {
    //if active, toggle between asc and desc
    if (elem.classList.contains('active')) {
        elem.classList.toggle('asc');
        elem.classList.toggle('desc');
    }

    //if inactive, reset all other functions and add ascending active
    if (elem.classList.contains('inactive')) {
        reset_sort_headers();
        elem.classList.remove('inactive');
        elem.classList.add('active');
    }
}

function is_all_rows_hidden(value) {
  return value.hidden == false;
}

function filter_table(elem) {
    var outcome_att = "data-test-result";
    var outcome = elem.getAttribute(outcome_att);
    class_outcome = outcome + " results-table-row";
    var outcome_rows = document.getElementsByClassName(class_outcome);

    for(var i = 0; i < outcome_rows.length; i++){
        outcome_rows[i].hidden = !elem.checked;
    }

    var rows = find_all('.results-table-row').filter(is_all_rows_hidden);
    var all_rows_hidden = rows.length == 0 ? true : false;
    var not_found_message = document.getElementById("not-found-message");
    not_found_message.hidden = !all_rows_hidden;
}
</script>
    <h1>report_api.html</h1>
    <p>Report generated on 20-Aug-2019 at 15:02:19 by <a href="https://pypi.python.org/pypi/pytest-html">pytest-html</a> v1.22.0</p>
    <h2>Environment</h2>
    <table id="environment">
      <tr>
        <td>Base URL</td>
        <td></td></tr>
      <tr>
        <td>Capabilities</td>
        <td>{}</td></tr>
      <tr>
        <td>Driver</td>
        <td>None</td></tr>
      <tr>
        <td>Packages</td>
        <td>{&apos;pytest&apos;: &apos;5.1.0&apos;, &apos;py&apos;: &apos;1.8.0&apos;, &apos;pluggy&apos;: &apos;0.12.0&apos;}</td></tr>
      <tr>
        <td>Platform</td>
        <td>Linux-5.0.0-25-generic-x86_64-with-Ubuntu-19.04-disco</td></tr>
      <tr>
        <td>Plugins</td>
        <td>{&apos;metadata&apos;: &apos;1.8.0&apos;, &apos;variables&apos;: &apos;1.7.1&apos;, &apos;html&apos;: &apos;1.22.0&apos;, &apos;base-url&apos;: &apos;1.4.1&apos;, &apos;vcr&apos;: &apos;1.0.2&apos;, &apos;selenium&apos;: &apos;1.17.0&apos;}</td></tr>
      <tr>
        <td>Python</td>
        <td>3.7.3</td></tr></table>
    <h2>Summary</h2>
    <p>42 tests ran in 10.18 seconds. </p>
    <p class="filter" hidden="true">(Un)check the boxes to filter the results.</p><input checked="true" class="filter" data-test-result="passed" hidden="true" name="filter_checkbox" onChange="filter_table(this)" type="checkbox"/><span class="passed">38 passed</span>, <input checked="true" class="filter" data-test-result="skipped" disabled="true" hidden="true" name="filter_checkbox" onChange="filter_table(this)" type="checkbox"/><span class="skipped">0 skipped</span>, <input checked="true" class="filter" data-test-result="failed" hidden="true" name="filter_checkbox" onChange="filter_table(this)" type="checkbox"/><span class="failed">4 failed</span>, <input checked="true" class="filter" data-test-result="error" disabled="true" hidden="true" name="filter_checkbox" onChange="filter_table(this)" type="checkbox"/><span class="error">0 errors</span>, <input checked="true" class="filter" data-test-result="xfailed" disabled="true" hidden="true" name="filter_checkbox" onChange="filter_table(this)" type="checkbox"/><span class="xfailed">0 expected failures</span>, <input checked="true" class="filter" data-test-result="xpassed" disabled="true" hidden="true" name="filter_checkbox" onChange="filter_table(this)" type="checkbox"/><span class="xpassed">0 unexpected passes</span>
    <h2>Results</h2>
    <table id="results-table">
      <thead id="results-table-head">
        <tr>
          <th class="sortable result initial-sort" col="result">Result</th>
          <th class="sortable" col="name">Test</th>
          <th class="sortable numeric" col="duration">Duration</th>
          <th>Links</th></tr>
        <tr hidden="true" id="not-found-message">
          <th colspan="4">No results found. Try to check the filters</th></tr></thead>
      <tbody class="failed results-table-row">
        <tr>
          <td class="col-result">Failed</td>
          <td class="col-name">tests/api/test_api_task_create.py::test_api_task_create_task_with_a_too_long_title</td>
          <td class="col-duration">0.07</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_create_task_with_a_too_long_title.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="log">api = base_url http://cbrun.qatest.dataiku.com user 0IP8moshO7EuUVSS<br/>new_user = 0IP8moshO7EuUVSS - NEMozlCVgYub4V53<br/>unique_task_title_too_long = &#x27;wKLQSFqqdHMqy2dWBaz3U&#x27;<br/><br/>    @pytest.mark.api<br/>    @pytest.mark.task<br/>    @pytest.mark.taskcreate<br/>    @pytest.mark.bug<br/>    @pytest.mark.vcr()<br/>    def test_api_task_create_task_with_a_too_long_title(<br/>        api, new_user, unique_task_title_too_long<br/>    ):<br/>        &quot;&quot;&quot;<br/>        1. Sign in.<br/>        2. Create a task with a unique title with 21 characters (shall fail).<br/>        &quot;&quot;&quot;<br/>        api.authenticate(new_user.username, new_user.password)<br/>        with pytest.raises(TodoAppApiException):<br/>&gt;           api.create_task(Task(unique_task_title_too_long))<br/><span class="error">E           Failed: DID NOT RAISE &lt;class &#x27;todoapp.api.client.TodoAppApiException&#x27;&gt;</span><br/><br/>tests/api/test_api_task_create.py:148: Failed<br/></div></td></tr></tbody>
      <tbody class="failed results-table-row">
        <tr>
          <td class="col-result">Failed</td>
          <td class="col-name">tests/api/test_api_task_delete.py::test_api_task_delete_task_another_user</td>
          <td class="col-duration">0.11</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_delete_task_another_user.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="log">api = base_url http://cbrun.qatest.dataiku.com user QA<br/>new_task = 15 - 3xCD2gFW9mg8Hzh9 - False, default_user = QA - willWin<br/><br/>    @pytest.mark.api<br/>    @pytest.mark.task<br/>    @pytest.mark.taskdelete<br/>    @pytest.mark.vcr()<br/>    @pytest.mark.bug<br/>    def test_api_task_delete_task_another_user(api, new_task, default_user):<br/>        &quot;&quot;&quot;<br/>        1. Sign in.<br/>        2. List the tasks. The newly created task is present.<br/>        3. Delete a task not owned by to the authenticated user (shall fail).<br/>        &quot;&quot;&quot;<br/>        api.authenticate(default_user.username, default_user.password)<br/>        assert new_task in api.list_tasks()<br/>        assert new_task.username != default_user.username<br/>        with pytest.raises(TodoAppApiException) as e_info:<br/>&gt;           api.delete_task(new_task.id)<br/><span class="error">E           Failed: DID NOT RAISE &lt;class &#x27;todoapp.api.client.TodoAppApiException&#x27;&gt;</span><br/><br/>tests/api/test_api_task_delete.py:54: Failed<br/></div></td></tr></tbody>
      <tbody class="failed results-table-row">
        <tr>
          <td class="col-result">Failed</td>
          <td class="col-name">tests/api/test_api_task_update.py::test_api_task_update_title_too_long</td>
          <td class="col-duration">0.09</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_update_title_too_long.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="log">api = base_url http://cbrun.qatest.dataiku.com user na0t8L4BP90yAO7r<br/>new_user = na0t8L4BP90yAO7r - leg9mgatfcwiCtem<br/>new_task = 24 - O1LA7TNXh7OHBa7caGXAt - False<br/>unique_task_title_too_long = &#x27;O1LA7TNXh7OHBa7caGXAt&#x27;<br/><br/>    @pytest.mark.api<br/>    @pytest.mark.task<br/>    @pytest.mark.taskupdate<br/>    @pytest.mark.bug<br/>    @pytest.mark.vcr()<br/>    def test_api_task_update_title_too_long(<br/>        api, new_user, new_task, unique_task_title_too_long<br/>    ):<br/>        &quot;&quot;&quot;<br/>        1. Sign in.<br/>        2. Update the title of a task owned by the authenticated user. The new title<br/>           length is 21 characters. (shall fail)<br/>        &quot;&quot;&quot;<br/>        api.authenticate(new_user.username, new_user.password)<br/>        new_task.title = unique_task_title_too_long<br/>        with pytest.raises(TodoAppApiException):<br/>&gt;           api.update_task(new_task.id, new_task)<br/><span class="error">E           Failed: DID NOT RAISE &lt;class &#x27;todoapp.api.client.TodoAppApiException&#x27;&gt;</span><br/><br/>tests/api/test_api_task_update.py:90: Failed<br/></div></td></tr></tbody>
      <tbody class="failed results-table-row">
        <tr>
          <td class="col-result">Failed</td>
          <td class="col-name">tests/api/test_api_user.py::test_api_user_create_users_with_the_same_password</td>
          <td class="col-duration">0.07</td>
          <td class="col-links"><a class="url" href="assets/test_api_user_create_users_with_the_same_password.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="log">api = base_url http://cbrun.qatest.dataiku.com user <br/><br/>    @pytest.mark.api<br/>    @pytest.mark.user<br/>    @pytest.mark.bug<br/>    @pytest.mark.vcr()<br/>    def test_api_user_create_users_with_the_same_password(api):<br/>        &quot;&quot;&quot;<br/>        1. Create a user with a unique name and a unique password.<br/>        2. Create another user with another unique name but with the same password.<br/>        &quot;&quot;&quot;<br/>        username1 = &quot;test_api_user_create_users_with_the_same_password_1&quot;<br/>        username2 = &quot;test_api_user_create_users_with_the_same_password_2&quot;<br/>        password = &quot;test_api_user_create_users_with_the_same_password&quot;<br/>        user = api.create_user(User(username1, password))<br/>        assert user.username == username1<br/>&gt;       user = api.create_user(User(username2, password))<br/><br/>tests/api/test_api_user.py:68: <br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/>todoapp/api/client.py:125: in create_user<br/>    check_status(response, 200, &quot;Unable to create user&quot;)<br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/><br/>response = &lt;Response [500]&gt;, expected_status = 200<br/>error_message = &#x27;Unable to create user&#x27;<br/><br/>    def check_status(response, expected_status, error_message):<br/>        if not response.status_code == expected_status:<br/>&gt;           raise TodoAppApiException(error_message, response.status_code, response.text)<br/><span class="error">E           todoapp.api.client.TodoAppApiException: Unable to create user: (HTTP 500) - Internal Server Error</span><br/><br/>todoapp/api/client.py:37: TodoAppApiException<br/></div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_authentication.py::test_api_authentication_success_basic</td>
          <td class="col-duration">0.04</td>
          <td class="col-links"><a class="url" href="assets/test_api_authentication_success_basic.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Sign in with the default user&apos;s credentials (using basic mode).
    2. Create a task.
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_authentication.py::test_api_authentication_success_token</td>
          <td class="col-duration">0.04</td>
          <td class="col-links"><a class="url" href="assets/test_api_authentication_success_token.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Sign in with the default user&apos;s credentials (using token mode).
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_authentication.py::test_api_authentication_failed_basic[nobody-personne]</td>
          <td class="col-duration">0.04</td>
          <td class="col-links"><a class="url" href="assets/test_api_authentication_failed_basic[nobody-personne].yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1.  Sign in with bad credentials using basic mode
    2. Create a task (shall fail).
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_authentication.py::test_api_authentication_failed_basic[-willWin]</td>
          <td class="col-duration">0.04</td>
          <td class="col-links"><a class="url" href="assets/test_api_authentication_failed_basic[-willWin].yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1.  Sign in with bad credentials using basic mode
    2. Create a task (shall fail).
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_authentication.py::test_api_authentication_failed_basic[QA-]</td>
          <td class="col-duration">0.04</td>
          <td class="col-links"><a class="url" href="assets/test_api_authentication_failed_basic[QA-].yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1.  Sign in with bad credentials using basic mode
    2. Create a task (shall fail).
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_authentication.py::test_api_authentication_failed_basic[-]</td>
          <td class="col-duration">0.04</td>
          <td class="col-links"><a class="url" href="assets/test_api_authentication_failed_basic[-].yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1.  Sign in with bad credentials using basic mode
    2. Create a task (shall fail).
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_authentication.py::test_api_authentication_failed_token[nobody-personne]</td>
          <td class="col-duration">0.04</td>
          <td class="col-links"><a class="url" href="assets/test_api_authentication_failed_token[nobody-personne].yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1.  Sign in with bad credentials using token mode (shall fail).
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_authentication.py::test_api_authentication_failed_token[-willWin]</td>
          <td class="col-duration">0.04</td>
          <td class="col-links"><a class="url" href="assets/test_api_authentication_failed_token[-willWin].yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1.  Sign in with bad credentials using token mode (shall fail).
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_authentication.py::test_api_authentication_failed_token[QA-]</td>
          <td class="col-duration">0.04</td>
          <td class="col-links"><a class="url" href="assets/test_api_authentication_failed_token[QA-].yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1.  Sign in with bad credentials using token mode (shall fail).
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_authentication.py::test_api_authentication_failed_token[-]</td>
          <td class="col-duration">0.04</td>
          <td class="col-links"><a class="url" href="assets/test_api_authentication_failed_token[-].yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1.  Sign in with bad credentials using token mode (shall fail).
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_tag_list.py::test_api_tag_list_anonymous</td>
          <td class="col-duration">0.04</td>
          <td class="col-links"><a class="url" href="assets/test_api_tag_list_anonymous.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. List all tags. The tags of a newly created task is present.
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_tag_list.py::test_api_tag_list_with_user</td>
          <td class="col-duration">0.07</td>
          <td class="col-links"><a class="url" href="assets/test_api_tag_list_with_user.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Sign in.
    1. List all tags. The tags of a newly created task is present.
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_create.py::test_api_task_create_task</td>
          <td class="col-duration">0.08</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_create_task.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Sign in.
    2. Create a task with no tag.
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_create.py::test_api_task_create_task_with_one_tag</td>
          <td class="col-duration">0.08</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_create_task_with_one_tag.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Sign in.
    2. Create a task with one tag.
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_create.py::test_api_task_create_task_with_many_tags</td>
          <td class="col-duration">0.08</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_create_task_with_many_tags.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Sign in.
    2. Create a task with two tags.
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_create.py::test_api_task_create_task_anonymous</td>
          <td class="col-duration">0.07</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_create_task_anonymous.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Create a task (user not authentified) (shall fail)
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_create.py::test_api_task_create_task_empty_title</td>
          <td class="col-duration">0.07</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_create_task_empty_title.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Sign in.
    2. Create a task with an empty title
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_create.py::test_api_task_create_two_tasks_with_same_title</td>
          <td class="col-duration">0.10</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_create_two_tasks_with_same_title.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Sign in.
    2. Create a task with a unique title
    3. Create a task with the same title (shall fail)
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_create.py::test_api_task_create_two_tasks_with_same_tag</td>
          <td class="col-duration">0.11</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_create_two_tasks_with_same_tag.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Sign in.
    2. Create a task with a unique title and a unique tag
    3. Create a task with another title and the same tag
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_create.py::test_api_task_create_task_with_a_long_title</td>
          <td class="col-duration">0.07</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_create_task_with_a_long_title.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Sign in.
    2. Create a task with a unique title with 20 characters.
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_delete.py::test_api_task_delete_task</td>
          <td class="col-duration">0.18</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_delete_task.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Sign in.
    2. List the tasks. The newly created task is present.
    3. Delete a task owned by to the authenticated user.
    4. List the tasks. The deleted task is not present.
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_delete.py::test_api_task_delete_task_anonymous</td>
          <td class="col-duration">0.10</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_delete_task_anonymous.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. List the tasks. The newly created task is present.
    2. Delete a task owned by an other user (shall fail).
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_get.py::test_api_task_get_task</td>
          <td class="col-duration">0.57</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_get_task.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Sign in.
    2. Get description for a task owned by to the authenticated user.
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_get.py::test_api_task_get_task_anonymous_user</td>
          <td class="col-duration">0.54</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_get_task_anonymous_user.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    2. As an anonymous user, get description for a task owned by another user.
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_list.py::test_api_task_list_as_anonymous_user</td>
          <td class="col-duration">0.05</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_list_as_anonymous_user.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Check if an anonymous user could find a newly created task in the list
    of all tasks.
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_list.py::test_api_task_list_as_authentified_user</td>
          <td class="col-duration">0.07</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_list_as_authentified_user.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Check if an authentified user could find a newly created task in the list
    of all tasks.
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_update.py::test_api_task_update_status</td>
          <td class="col-duration">0.60</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_update_status.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Sign in.
    2. Update a task owned by the authenticated user.
    3. Get task description. The task is updated.
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_update.py::test_api_task_update_task_anonymous</td>
          <td class="col-duration">0.04</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_update_task_anonymous.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. As an anonymous user, update a task (shall fail).
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_update.py::test_api_task_update_task_another_user</td>
          <td class="col-duration">0.07</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_update_task_another_user.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Sign in.
    2. Update a task owned by the another user (shall fail).
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_update.py::test_api_task_update_title</td>
          <td class="col-duration">0.60</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_update_title.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Sign in.
    2. Update the title of a task owned by the authenticated user.
    3. Get task description. The task is updated.
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_update.py::test_api_task_update_tag</td>
          <td class="col-duration">0.59</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_update_tag.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Sign in.
    2. Update the tag name of a task owned by the authenticated user.
    3. Get task description. The task is updated.
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_task_update.py::test_api_task_update_tag_too_long</td>
          <td class="col-duration">0.08</td>
          <td class="col-links"><a class="url" href="assets/test_api_task_update_tag_too_long.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Sign in.
    2. Update the tag name of a task owned by the authenticated user.
       The new tag name length is 21 characters. (shall fail)
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_user.py::test_api_user_create_user_success</td>
          <td class="col-duration">0.04</td>
          <td class="col-links"><a class="url" href="assets/test_api_user_create_user_success.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Create a user with a unique name and a unique password.
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_user.py::test_api_user_create_user_with_uncomplete_informations[-onlypassword]</td>
          <td class="col-duration">0.04</td>
          <td class="col-links"><a class="url" href="assets/test_api_user_create_user_with_uncomplete_informations[-onlypassword].yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Create a user with uncomplete informations (shall fail).
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_user.py::test_api_user_create_user_with_uncomplete_informations[onlyusername-]</td>
          <td class="col-duration">0.04</td>
          <td class="col-links"><a class="url" href="assets/test_api_user_create_user_with_uncomplete_informations[onlyusername-].yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Create a user with uncomplete informations (shall fail).
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_user.py::test_api_user_create_user_with_uncomplete_informations[-]</td>
          <td class="col-duration">0.04</td>
          <td class="col-links"><a class="url" href="assets/test_api_user_create_user_with_uncomplete_informations[-].yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Create a user with uncomplete informations (shall fail).
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_user.py::test_api_user_create_users_with_the_same_username</td>
          <td class="col-duration">0.07</td>
          <td class="col-links"><a class="url" href="assets/test_api_user_create_users_with_the_same_username.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Create a user with a unique name and a unique password.
    2. Create another user with the same informations (shall fail).
    </div></td></tr></tbody>
      <tbody class="passed results-table-row">
        <tr>
          <td class="col-result">Passed</td>
          <td class="col-name">tests/api/test_api_user.py::test_api_user_new_user_can_sign_in</td>
          <td class="col-duration">0.08</td>
          <td class="col-links"><a class="url" href="assets/test_api_user_new_user_can_sign_in.yaml" target="_blank">HTTP</a> </td></tr>
        <tr>
          <td class="extra" colspan="4">
            <div class="empty log">
    1. Create a user with a unique name and a unique password.
    2. Sign in with the new user.
    </div></td></tr></tbody></table></body></html>